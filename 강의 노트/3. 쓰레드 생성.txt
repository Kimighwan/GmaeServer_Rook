thread 헤더파일 사용

std::thread t; 쓰레드 객체 생성

따른 Somting 함수를 생성자로 넘겨주면 해당 쓰레드는 해당 함수를 맡게 된다 
 ㄴ  std::thread t(Fucn);

만약 해당 함수가 매개변수가 있다면?
 ㄴ std::thread t(Func, 매개변수...);


이 때 main이 먼저 끝나고 방금 만든 쓰레드는 아직 종료를 안했다면
에러가 나타난다.
그래서 해당 쓰레드가 끝날 때까지 기다려야한다.
이때 thread의 join함수를 사용한다
t.join();

또 자주 사용하는 함수들을 알아보자
t.hardware_concurrency();
t.get_id();
t.detach();
t.joinable();

hardware_concurrency 는 cpu 코어 개수를 몇개인지 알려준다 
 ㄴ 즉 논리적으로 실행할 수 있는 프로세스 개수를 알려준다
  ㄴ 근데 정확하지가 않다 정보를 추출할 수 없다고 하면 0을 리턴하는 경우도 있다

get_id는 각 쓰레드마다 id를 알려준다.

detach는
join의 경우는 스레드가 끝날 때까지 main쓰레드가 계속 기다려주는 것인데
반대로 스레드객체와 main쓰레드의 연결을 끊어주는 것이다.
 ㄴ 백그라운드 쓰레드로 독립적으로 동작하는 쓰레드이다.
   ㄴ 그러면 쓰레드의 정보를 추출할 수 없다 그래서 보통 사용할 일이 없다

joinable은 detach상태라거나 실질적으로 연동된 스레드가 없다는지 판별한다.








