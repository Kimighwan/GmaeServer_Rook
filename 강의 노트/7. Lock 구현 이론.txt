실질적으로 우리만의 방법으로 lock 을 구현\

왜 라이브러리 사용하지 않고>

워낙 중요하고 면접에서도 자주 나오는 개념들이 많이 들어가기 때문이다.,

우리가 하고 싶은것은
자물쇠를 가지고 누군가 안에 들어가면
상호배타적으로 그 사람만 무언가 작업을 하고 나머지는 대기를 할 수 밖에 없게

여기서 대기하는 사람 기준으로
어떤 정책을 정할 것이냐 
이것이 2번째 문제가 된다

화장실에 누가 사용중이면
그냥 계속 대기할 수 있지만
자리로 돌아갔다가 다시 대기하던가
아니면 다른 화장실도 있을 것이다.
 => 사실 무엇에 따라 성능이 미세하게 갈린다..

1. 계속 대기(스핀락) (면접에서 자주 나옴)
-> 일반적으로 스핀 락에 해당한다
  ㄴ 계속 앞에서 들어갈 수 있는지 확인
 ㄴ 왔다갔다 하는 비용이 없음
 ㄴ 지루함

2. 자리 돌아가서 다시 오겠다
ㄴ 잠시 sleep하고 운영체제한테 소유권 넘기고 다시 돌아오고
 이벤트를 사용하는 방법
 ㄴ 효율적인지 알 수 없음
  ㄴ 10초뒤 자리가 날 상황인데 자리로 가서 3분뒤에 다시 오면 자리 뺏길 수 있고
 ㄴ 3분뒤 다시 왔는데 딱 그 때 자리가 나올 수 있다.

3. 갑질메타
화장실이 비면 알려달라 그 때 들어가는 거
단점: 알려주는 그 무언가가 리소스를 잡아먹겠지


2,3 번은 왔다갔다하는 부하가 걸림 -> 컨텍스트 스위칭


커널모드 운영체제가 관리하는 관리자 ex) 윈도우

근데 컨텍스트 스위칭에 부하 좀 있는 작업임

작은 레지스터에서 현재 작업하는 모든 정보를 저장하는데
스위칭발생시 현재 정보를 다시 ram에 다 저장하고 
지금 하고자 하는 작업에 대한 정보를 ram에서 레지스터로 모두 불러와야한다.









