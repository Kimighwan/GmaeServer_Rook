3개의 프로젝트를 만들건데
게임 서버 1개, 클라 용도인 더미 클라이언트 1개,  ==> 콘솔앱으로 프로젝트 생성
서버 코어라고 해서 서버의 핵심기능인 네트워크, 쓰레드 등등을 구현할 라이브러리 파일
 ㄴ 라이브러리로 프로젝트 생성
    ㄴ 정적과 동적 라이브러리 2개가 있는데 
        ㄴ 정적 라이브러리는 빌드를 할 때 바이너리에 해당 라이브러리가 포함되어 있어서
             실행파일을 정적 라이브러리를 따로 관리할 필요없는데
        ㄴ 동적 라이브러리는 최종 빌드를 해도 같이 붙어다니는게 아니라 계속 관리를 해줘야 한다


프로젝트 3개 만들었으면 탐색기를 열어서 실행파일들을 저장할 Binary폴더
 ㄴ 나중에 가면 게임 서버 뿐만아니라 서버를 분산 처리한다면 로그인 서버 등등 많이 생길텐데
      실행파일이 여기저기 흩어져있으면 어지롭고 찾기 힘드니 모아준다

라이브러리를 저장할 Libraries를 만드는데 라이브러리를 집어넣는 폴더인데
위의 서버 코어도 라이브러리로 활용되는데 만들어주는 이유는 나중에 다양한 용도로 
외부에서 사용할 수 있기 때문에 한 곳에 모아준다
Debug용이랑 Release용으로 파일을 또 만들어주는데
 ㄴ 간혹 디버그로 서버 코어로 빌드해서 라이브러리가 디버그 모드로 만들었는데
      다른 서버는 Release모드로 만들어져서 나중에 버전이 꼬이는 문제가 있어서 버전을 나누어 준것이다.

라이브러리 프로젝트의 속성에서 출력 디렉토리를 아까만든 Libraries의 디버그, 릴리즈 모드 각각에 맞게 저장되기 위해
$(SolutionDir)Libraries\$(Configuration)\ 이렇게 변경해주면
Libraries 폴더안에 디버그, 릴리즈 만들었는데 Configuration가 각각 해당되는 곳으로 저장될 것이다.

새클래스인 CorePch라는 것을 만들어주는데 Pch는 Pre-Compiled Header라는 의미이고
서버 코어에서 활용하는 모든 파일에서 공용으로 참조할 그런 애들을 다 여기에 넣어주는 것인데
기존에 pch가 있는데 생성한 이유는 사실 여기는 다른 프로젝트에서 참조할 수 없다
 ㄴ 그래서 새로 다른 프로젝트에서 참조할 용도로 만듦

또 Tpyes라는 해더파일 1개를 또 만들어주는데 여기에는 뭔가 메크로 형식으로 사용할 친구를 만들 것이다.

CorePch.h 에서 기본적으로 사용할 해더파일들을 선언하고 vector, list, queue 등등
간단한 함수를 선언

다시 CorePch.cpp 에서 해당 함수를 정의하고 일단 Test용으로 Hellow World 출력

이제 이렇게 만든것을 게임 서버랑 더미 클라이언트에서 사용하고 싶은데 

GameServer프로젝트에서 나중에 더미클라이언트 작업할 거임

앞서와 다르게 pre-compiled header가 없어서 만들어줄건데
Main이라는 폴더를 만들고 안에 기본 cpp파일을 옮기고 해더,소스,리소스 파일을 삭제해준다

그리고 Utils라는 폴더를 만들어 pch 클래스를 만들어준다
여기에도 게임 서버 프로젝트에서 자주 활용되는 헤더들을 pch.h에 몰아서 넣어준다
그러면 장점이 빌드가 1번에 돼서 미리 빌드를 한 다음에 나머지 얘들이 활용할 때
다시 빌드를 할 필요없이 빠르게 사용할 수 있다
단점은 pch.h 내용을 수정을 하면 많은 곳에 영향을 끼친다는 단점이 있다.

앞서 ServerCore프로젝트의 pch.h와 동일하게 코딩을 해주는데 ServerCore 프로젝트의 CorePch.h를 인지를 못할 것이다.
바로 include를 할 수 없고 나중에 수정하자

GameServer프로젝트의 pch.h도 고지곳대로 동작하는게 아니다
앞서 추가했다고 미리 컴파일된 헤더로 동작하는게 아니라 설정을 해줘야 한다
해당 프로젝트 속성에서 c/c++ -> 미리 컴파일된 헤더 ->미리 컴파일된 헤더 -> 사용
그리고 그 헤더파일이 pch.h이니깐 밑에 미리 컴파일된 헤더 파일을 pch.h로 변경

그리고 pch.cpp만 속성에서 미리 컴파일된 헤더를 사용이 아닌 만들기 옵션으로 변경하면 끝난다.

방금한 내용은 pch.h를 활용할 준비를 마친 것임

앞에서 못한 CorePch.h 참조하는 방법은 프로젝트에서 포함 디렉토리 옵션을 활용하면 되는데
여러가지 방법중 VC++ 디렉토리에서 하자 다른 방법은 c/c++ -> 일반 -> 추가 포함 디렉터리
                                                                                         링커 -> 추가 라이브러리 디렉토리 가 있다.


여기에서 포함 디렉토리와 라이브러리 디렉터리를 설정할 것이다
 ㄴ 참조할 헤더파일과 라이브러리가 어디에있냐 를 알려주는 것이다.

우선 참조할 헤더파일은 포함 디렉토리에서 추가해주면 되는데
우측 상단에 폴더모양 클릭해서 경로를 타이핑하면 된다.

$(SolutionDir)ServerCore\
 => $(SolutionDir) 뜻 솔루션의 절대 경로 이름을 뜻함

그후 아래 화살표를 눌러 밑으로 내려주면 됨

라이브러리도 마찬가지로 라이브러리 디렉토리 편집들어가서 
$(SolutionDir)Libraries\ 입력

이렇게 라이브러리가 어떤 경로에 있는지 알려줬는데

속성의 링커 -> 입력 -> 추가 종속성에서 사용하고 있는 라이브러리들이 있다.
그럼 여기다가 추후에 ServerCore에 추가할 .lib(라이브러리) 를 입력해도 되고
 ㄴ 근데 매번 여기서하는 것은 귀찮아서

GameServer의 헤더파일에서 추가하는 방법이 있다.

예를 들면 디버그 모드일 때는 어디에 있는 라이브러리를 들고 오고
아니면(릴리즈 모드) 다른 곳에서 라이브러리를 들고오는
ifdef문으로 처리한다

그러면 앞과 같이 속성 우클릭해서 일일이 입력할 필요없이 전처리기 단계에서 긁어와서 처리하게 된다.

그리고 이렇게 라이브러리를 참조하고 있으면


서버엔진인 서버코어와
클라랑 서버를 각각 만들어서 각각 컨텐츠를 담당하는 Main폴더의 cpp를 만들었다


마지막으로 실행파일을 저장하는 곳을 지정할 것이다.
속성에서 일반 -> 출력 디렉토리를 설정해주면 된다
